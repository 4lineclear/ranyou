pql {
  statement pql | nil
}
statement {
  ("let" name "=" | "return")  statement_value ";"
}
statement_value {
  fn | select | join | array | value
}
fn {
  "fn" '(' fn_params ')' pql "nf"
}
fn_params {
  name (":" name | nil) ("," fn_params | nil) ("," | nil)
}
select {
  "select" name_array 
  "from" name_array 
  ("where" predicate | nil) 
  ("order" "by" (name_array | fn) | nil)
}
predicate {
  ("not" | nil) value cmp value (bool_op predicate | nil) | "(" predicate ")"
}
bool_op { 
  "and" | "or" | "xor" | "nand" | "nor" | "xnor"
}
cmp {
  "=" | "<" | ">" | "<=" | ">=" | "in" | 
  "between" | "like" | "similar" "to"
}
value {
  fn_call | name | tuple | string | number | const_bool | predicate
}
fn_call {
  name '(' array ')'
}
tuple {
  '(' array ')'
}
array {
  value ("," array | nil) ("," | nil)
}
join {
  "join" name_array
}
name_array {
  name ("," name_array | nil) ("," | nil)
}
name {
  "[a-zA-z_-]" (name | nil) | "_"
}
string {
  '"' unicode '"'
}
const_bool {
  "true" | "false"
}
unicode {/* unicode */}
number {/* number */}
