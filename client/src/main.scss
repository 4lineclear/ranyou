@use "sass:map" as map;

// TODO: create light mode colors

$foreground: #e8e8e8;
$background: #1f1f1f;

$f-contrast: #d8d8d8;
$b-contrast: #3f3f3f;

$fh-contrast: #f8f8f8;
$bh-contrast: #4f4f4f;

// <uniquifier>: Use a unique and descriptive class name
// <weight>: Use a value from 200 to 800

@mixin font() {
  font-family: "Noto Sans", serif;
  font-optical-sizing: auto;
  font-weight: 300;
  font-style: normal;
  font-variation-settings: "wdth" 100;
}

html,
body,
#root {
  padding: 0;
  margin: 0;
  color: $foreground;
  background: $background;
  scroll-behavior: smooth;
  @include font;
}

#root {
  /* padding: 2%; */
  display: flex;
  flex-direction: column;
  align-items: center;
}

button,
hr {
  background: $background;
  color: $foreground;
}

button {
  cursor: pointer;
}

button {
  background: $b-contrast;
  border: none;
  border-radius: 10px;
}

button:hover {
  background: $bh-contrast;
}

/* 
Element First Media Queries

built off https://cheewebdevelopment.com/element-first-scss-media-queries/
breakpoints pulled from: https://getbootstrap.com/docs/5.0/layout/breakpoints/
*/

// A map of breakpoints.
$breakpoints: (
  xs: 0px,
  sm: 576px,
  md: 768px,
  lg: 992px,
  xl: 1200px,
  xxl: 1400px,
);

// a query below(default) or above a point
@mixin size($breakpoint, $direction: down) {
  // If the breakpoint exists in the map, get it, else use wildcard
  $breakpoint-value: if(
    map.has-key($breakpoints, $breakpoint),
    map.get($breakpoints, $breakpoint),
    $breakpoint
  );
  @if $direction == up {
    @media (min-width: $breakpoint-value) {
      @content;
    }
  } @else if $direction == down {
    @media (max-width: $breakpoint-value) {
      @content;
    }
  }
}

// a query between two points
@mixin within($lower, $upper) {
  $lower-breakpoint: if(
    map.has-key($breakpoints, $lower),
    map.get($breakpoints, $lower),
    $lower
  );
  $upper-breakpoint: if(
    map.has-key($breakpoints, $upper),
    map.get($breakpoints, $upper),
    $upper
  );

  @media (min-width: $lower-breakpoint) and (max-width: ($upper-breakpoint)) {
    @content;
  }
}
