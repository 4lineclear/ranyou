/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from "@tanstack/react-router";

// Import Routes

import { Route as rootRoute } from "./routes/__root";
import { Route as PlayPlaylistIdIndexImport } from "./routes/play/$playlistId/index";
import { Route as PlayPlaylistIdIdIndexImport } from "./routes/play/$playlistId/$id/index";

// Create Virtual Routes

const FiorLazyImport = createFileRoute("/fior")();
const IndexLazyImport = createFileRoute("/")();

// Create/Update Routes

const FiorLazyRoute = FiorLazyImport.update({
  id: "/fior",
  path: "/fior",
  getParentRoute: () => rootRoute,
} as any).lazy(() => import("./routes/fior.lazy").then((d) => d.Route));

const IndexLazyRoute = IndexLazyImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => rootRoute,
} as any).lazy(() => import("./routes/index.lazy").then((d) => d.Route));

const PlayPlaylistIdIndexRoute = PlayPlaylistIdIndexImport.update({
  id: "/play/$playlistId/",
  path: "/play/$playlistId/",
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import("./routes/play/$playlistId/index.lazy").then((d) => d.Route),
);

const PlayPlaylistIdIdIndexRoute = PlayPlaylistIdIdIndexImport.update({
  id: "/play/$playlistId/$id/",
  path: "/play/$playlistId/$id/",
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import("./routes/play/$playlistId/$id/index.lazy").then((d) => d.Route),
);

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/": {
      id: "/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof IndexLazyImport;
      parentRoute: typeof rootRoute;
    };
    "/fior": {
      id: "/fior";
      path: "/fior";
      fullPath: "/fior";
      preLoaderRoute: typeof FiorLazyImport;
      parentRoute: typeof rootRoute;
    };
    "/play/$playlistId/": {
      id: "/play/$playlistId/";
      path: "/play/$playlistId";
      fullPath: "/play/$playlistId";
      preLoaderRoute: typeof PlayPlaylistIdIndexImport;
      parentRoute: typeof rootRoute;
    };
    "/play/$playlistId/$id/": {
      id: "/play/$playlistId/$id/";
      path: "/play/$playlistId/$id";
      fullPath: "/play/$playlistId/$id";
      preLoaderRoute: typeof PlayPlaylistIdIdIndexImport;
      parentRoute: typeof rootRoute;
    };
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  "/": typeof IndexLazyRoute;
  "/fior": typeof FiorLazyRoute;
  "/play/$playlistId": typeof PlayPlaylistIdIndexRoute;
  "/play/$playlistId/$id": typeof PlayPlaylistIdIdIndexRoute;
}

export interface FileRoutesByTo {
  "/": typeof IndexLazyRoute;
  "/fior": typeof FiorLazyRoute;
  "/play/$playlistId": typeof PlayPlaylistIdIndexRoute;
  "/play/$playlistId/$id": typeof PlayPlaylistIdIdIndexRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  "/": typeof IndexLazyRoute;
  "/fior": typeof FiorLazyRoute;
  "/play/$playlistId/": typeof PlayPlaylistIdIndexRoute;
  "/play/$playlistId/$id/": typeof PlayPlaylistIdIdIndexRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths: "/" | "/fior" | "/play/$playlistId" | "/play/$playlistId/$id";
  fileRoutesByTo: FileRoutesByTo;
  to: "/" | "/fior" | "/play/$playlistId" | "/play/$playlistId/$id";
  id:
    | "__root__"
    | "/"
    | "/fior"
    | "/play/$playlistId/"
    | "/play/$playlistId/$id/";
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute;
  FiorLazyRoute: typeof FiorLazyRoute;
  PlayPlaylistIdIndexRoute: typeof PlayPlaylistIdIndexRoute;
  PlayPlaylistIdIdIndexRoute: typeof PlayPlaylistIdIdIndexRoute;
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  FiorLazyRoute: FiorLazyRoute,
  PlayPlaylistIdIndexRoute: PlayPlaylistIdIndexRoute,
  PlayPlaylistIdIdIndexRoute: PlayPlaylistIdIdIndexRoute,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/fior",
        "/play/$playlistId/",
        "/play/$playlistId/$id/"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/fior": {
      "filePath": "fior.lazy.tsx"
    },
    "/play/$playlistId/": {
      "filePath": "play/$playlistId/index.tsx"
    },
    "/play/$playlistId/$id/": {
      "filePath": "play/$playlistId/$id/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
